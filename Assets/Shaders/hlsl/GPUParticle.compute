#pragma kernel Init
#pragma kernel Emit
#pragma kernel Update

#define THREAD_COUNT 256
#define EPSILON 1e-3
#define PI 3.1415926535


#include "SimplexNoise3D.hlsl"
#include "Particle.hlsl"

float2 time; //x = delta time, y = elapsed time
float3 seeds;
float2 lifeRange; //x = min, y = max
float2 initialSpeedRange; //x = min, y = max
float3 inheritedPosition;
float3 inheritedVelocity;
float extrapolation;

float3 constantVelocity;
float3 constantForce;
float linearDrag;

float convergence;
float viscosity;

int emissionShape;
float radius;
float3 boxSize;
float3 edgeStart;
float3 edgeEnd;

int directionType;
float3 direction;

int colorMode;
float4 color;
Texture2D<float4> colorOverLife;
int colorSteps;

int sizeMode;
float size;
RWStructuredBuffer<float> sizeOverLife;
int sizeSteps;

RWStructuredBuffer<Particle> particles;
AppendStructuredBuffer<uint> dead;
ConsumeStructuredBuffer<uint> alive;

float rand(float3 co)
{
    return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 45.5432))) * 43758.5453);
}
float3 randomPointOnSphere(float u, float v, float radius)
{
    float theta = 2 * PI * u;
    float phi = acos(2 * v - 1);
    float x = radius * sin(phi) * cos(theta);
    float y = radius * sin(phi) * sin(theta);
    float z = radius * cos(phi);
    return float3(x, y, z);
}
float3 curlNoise(float3 coord)
{
    float3 dx = float3(EPSILON, 0.0, 0.0);
    float3 dy = float3(0.0, EPSILON, 0.0);
    float3 dz = float3(0.0, 0.0, EPSILON);

    float3 dpdx0 = snoise(coord - dx);
    float3 dpdx1 = snoise(coord + dx);
    float3 dpdy0 = snoise(coord - dy);
    float3 dpdy1 = snoise(coord + dy);
    float3 dpdz0 = snoise(coord - dz);
    float3 dpdz1 = snoise(coord + dz);

    float x = dpdy1.z - dpdy0.z + dpdz1.y - dpdz0.y;
    float y = dpdz1.x - dpdz0.x + dpdx1.z - dpdx0.z;
    float z = dpdx1.y - dpdx0.y + dpdy1.x - dpdy0.x;

    return float3(x, y, z) / EPSILON * 2.0;
}
float4 getLifeColor(float2 life)
{
    return colorOverLife.Load(int3(round(life.x / life.y * (float)colorSteps), 0, 0));
}
float getLifeSize(float2 life)
{
    return sizeOverLife[round(life.x / life.y * (float)sizeSteps)];
}

[numthreads(THREAD_COUNT, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    particles[id.x].alive = false;
    dead.Append(id.x);
}

[numthreads(1, 1, 1)]
void Emit()
{
    uint id = alive.Consume();

    Particle p = particles[id];

    p.alive = true;
    if (emissionShape == 0) //Sphere
    {
        p.position = randomPointOnSphere(rand(seeds.xyz / (id + 1)), rand(seeds.yzx / (id + 1)), radius * rand(seeds.zyx / (id + 1)));
    }
    else if (emissionShape == 1) //Box
    {
        p.position = float3(boxSize.x * rand(seeds.xyz / (id + 1)) - boxSize.x / 2.0f, boxSize.y * rand(seeds.yzx / (id + 1)) - boxSize.y / 2.0f, boxSize.z * rand(seeds.zyx / (id + 1)) - boxSize.z / 2.0f);
    }
    else if (emissionShape == 7) //Edge
    {
        p.position = edgeStart + (edgeEnd - edgeStart) * rand(seeds.xyz / (id + 1));
    }
    float initialSpeed = initialSpeedRange.x + (initialSpeedRange.y - initialSpeedRange.x) * rand(seeds.xzy / (id + 1));
    if (directionType == 0)
    {
        p.velocity = normalize(p.position) * initialSpeed;
    }
    else if (directionType == 1)
    {
        p.velocity = direction;
    }
    p.velocity += inheritedVelocity;
    p.position -= inheritedVelocity * rand(seeds.xzy / (id + 1)) * extrapolation;
    p.position += inheritedPosition;
    p.life.x = 0.0f;
    p.life.y = lifeRange.x + (lifeRange.y - lifeRange.x) * rand(seeds.zxy / (id + 1));
    if (colorMode <= 1)
    {
        p.color = color;
    }
    else
    {
        p.color = float4(rand(seeds.yzx / (id + 1)), rand(seeds.xyz / (id + 1)), rand(seeds.zyx / (id + 1)), 1.0f);
    }
    p.size = size;

    particles[id] = p;
}

[numthreads(THREAD_COUNT, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    Particle p = particles[id.x];

    if (p.alive)
    {
        if (p.life.x + time.x >= p.life.y)
        {
            p.alive = false;
            dead.Append(id.x);
        }
        p.life.x += time.x;

        if (viscosity != 0.0f)
        {
            p.velocity += (curlNoise(p.position * time.x * convergence) - p.velocity) * viscosity * time.x;
        }
        p.velocity += constantForce * time.x;
        p.velocity *= (1 - time.x * linearDrag);
        p.position += (p.velocity + constantVelocity) * time.x;

        if (colorMode == 1)
        {
            p.color = getLifeColor(p.life);
        }
        if (sizeMode == 1)
        {
            p.size = getLifeSize(p.life);
        }
    }

    particles[id.x] = p;
}
